;; ----------------------------------------------------------------
;; @ General
;; ----------------------------------------------------------------

;; ’¥Ñ’¥¹’¤Î’Àß’Äê
(add-to-list 'load-path "~/.emacs.d/elisp")

;; rbenv’¤Ç’Æþ’¤ì’¤¿ruby’¤ò’»È’¤¦
(setenv "PATH" (concat (getenv "HOME") "/.rbenv/shims:"
                       (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))
(setq exec-path (cons (concat (getenv "HOME") "/.rbenv/shims")
                      (cons (concat (getenv "HOME") "/.rbenv/bin") exec-path)))

;; ’²è’ÌÌ’¤Î’Àß’Äê
(setq inhibit-startup-message t)        ;; ’µ¯’Æ°’²è’ÌÌ’¤ò’É½’¼¨’¤·’¤Ê’¤¤
(global-linum-mode t)                   ;; ’¹Ô’ÈÖ’¹æ’¤ò’¾ï’¤Ë’É½’¼¨’¤¹’¤ë
(setq linum-delay t)
(setq linum-format "%3d ")
(defadvice linum-schedule (around my-linum-schedule () activate)
  (run-with-idle-timer 0.2 nil #'linum-update-current))
(setq show-paren-delay 0.125)          

;; raliscasts, tomorrow-night
(require 'color-theme)
(color-theme-initialize)
(add-to-list 'custom-theme-load-path "~/.emacs.d/elisp/themes")
(color-theme-railscasts)
;; (color-theme-tomorrow-night)

;; monokai , zenburn , molokai
(setq custom-theme-load-path nil)
(add-to-list 'custom-theme-load-path "~/.emacs.d/elisp/themes")
(load-theme 'monokai t)
;; (load-theme 'solarized-dark t)
;; (load-theme 'molokai t)
;; (load-theme 'zenburn t)

(setq-default tab-width 2)              ;; ’¥¤’¥ó’¥Ç’¥ó’¥È’¤Î’¿¼’¤µ’¤ò2’¤Ë’¤¹’¤ë
(setq-default indent-tabs-mode nil)     ;; ’¥¿’¥Ö’¤ò’¥¹’¥Ú’¡¼’¥¹’¤Ç’°·’¤¦

;; ’Ê¸’»ú’¥³’¡¼’¥É’¤Î’»Ø’Äê
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)

;; ’¥¯’¥ê’¥Ã’¥×’¥Ü’¡¼’¥É’¤«’¤é’¤Î’Ê¸’»ú’²½’¤±’ÂÐ’ºö
(set-clipboard-coding-system 'utf-8)
(setq x-select-enable-clipboard t)

;; ’¥Õ’¥©’¥ó’¥È
(set-face-attribute 'default nil
                    :family "ricty"
                    :height 165)
(set-fontset-font
 nil 'japanese-jisx0208
 (font-spec :family "ricty"))

;;; *.~ ’¤È’¤«’¤Î’¥Ð’¥Ã’¥¯’¥¢’¥Ã’¥×’¥Õ’¥¡’¥¤’¥ë’¤ò’ºî’¤é’¤Ê’¤¤
(setq make-backup-files nil)
;;; .#* ’¤È’¤«’¤Î’¥Ð’¥Ã’¥¯’¥¢’¥Ã’¥×’¥Õ’¥¡’¥¤’¥ë’¤ò’ºî’¤é’¤Ê’¤¤
(setq auto-save-default nil)

;; yes or no’¤òy or n
(fset 'yes-or-no-p 'y-or-n-p)

;; ’¥Õ’¥¡’¥¤’¥ë’¤¬ #! ’¤«’¤é’»Ï’¤Þ’¤ë’¾ì’¹ç’¡¢+x’¤ò’ÉÕ’¤±’¤Æ’ÊÝ’Â¸’¤¹’¤ë
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

;; file’Ì¾’¤Î’Êä’´°’¤Ç’Âç’Ê¸’»ú’¾®’Ê¸’»ú’¤ò’¶è’ÊÌ’¤·’¤Ê’¤¤
(setq completion-ignore-case t)

;; ’¥Ð’¥Ã’¥Õ’¥¡’¤Î’¼«’Æ°’ÆÉ’¤ß’¹þ’¤ß
(global-auto-revert-mode 1)

;; ’Æ±’Ì¾’¥Õ’¥¡’¥¤’¥ë’¤Î’¥Ð’¥Ã’¥Õ’¥¡’Ì¾’¤Î’¼±’ÊÌ’Ê¸’»ú’Îó’¤ò’ÊÑ’¹¹’¤¹’¤ë
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

;; ’¸½’ºß’¹Ô’¤Î’¥Ï’¥¤’¥é’¥¤’¥È
(defface hlline-face
  '((((class color)
      (background dark))
     (:background "dark slate gray"))
    (((class color)
      (background light))
     (:background  "#98FB98"))
    (t
     ()))
  "Face used by hl-line.")
(setq hl-line-face 'hlline-face)
(global-hl-line-mode)

;; ’¥ê’¡¼’¥¸’¥ç’¥ó’¤Î’¿§’¤ò’Àß’Äê
(transient-mark-mode t)
(set-face-background 'region "Blue")

;; ’¥¹’¥¯’¥í’¡¼’¥ë’¥Ð’¡¼’¤ò’»È’¤ï’¤Ê’¤¤
(toggle-scroll-bar nil)
;; ’¥á’¥Ë’¥å’¡¼’¥Ð’¡¼’¤ò’»È’¤ï’¤Ê’¤¤
(menu-bar-mode 0)
;; ’¥Ä’¡¼’¥ë’¥Ð’¡¼’¤ò’»È’¤ï’¤Ê’¤¤
(tool-bar-mode 0)

;; ’¥¦’¥£’¥ó’¥É’¥¦’¤Î’ÀÚ’¤ê’ÂØ’¤¨
(defun other-window-or-split (val)
  (interactive)
  (when (one-window-p)
    (split-window-horizontally))
  (other-window val))

(global-set-key (kbd "<C-tab>") (lambda () (interactive) (other-window-or-split 1)))
(global-set-key (kbd "<C-S-tab>") (lambda () (interactive) (other-window-or-split -1)))

;; Re-open read-only files as root automagically
(defun th-rename-tramp-buffer ()
  (when (file-remote-p (buffer-file-name))
    (rename-buffer
     (format "%s:%s"
             (file-remote-p (buffer-file-name) 'method)
             (buffer-name)))))

(add-hook 'find-file-hook
          'th-rename-tramp-buffer)

(defadvice find-file (around th-find-file activate)
  "Open FILENAME using tramp's sudo method if it's read-only."
  (if (and (not (file-writable-p (ad-get-arg 0)))
           (y-or-n-p (concat "File "
                             (ad-get-arg 0)
                             " is read-only.  Open it as root? ")))
      (th-find-file-sudo (ad-get-arg 0))
    ad-do-it))

(defun th-find-file-sudo (file)
  "Opens FILE with root privileges."
  (set-buffer (find-file (concat "/sudo::" file))))

;;kill-ring
(setq kill-ring-max 20)

;; wordwrap
;; (setq-default word-wrap t)

;; ’ºÇ’¸å’¤Ë’²þ’¹Ô’¤ò’Æþ’¤ì’¤ë
(setq require-final-newline t)

;; ’¹Ô’Ëö’¤Î’¶õ’Çò’¤ò’ºï’½ü
;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

;; ----------------------------------------------------------------
;; @ key bind
;; ----------------------------------------------------------------

(keyboard-translate ?\C-h ?\C-?)
(global-set-key (kbd "M-h") 'backward-kill-word)
(global-set-key (kbd "C-m") 'newline-and-indent)
(global-set-key (kbd "C-c l") 'toggle-truncate-lines)
(global-set-key (kbd "C-;") 'comment-dwim)
(global-set-key (kbd "C-/") 'undo)
(global-set-key (kbd "C-x C-/") 'redo)
(global-set-key (kbd "C-c C-a") 'align-regexp)
(global-set-key (kbd "M-:") 'dabbrev-expand)
(global-set-key (kbd "M-i") 'imenu)
(global-set-key (kbd "C-:") 'indent-rigidly) 
;; (global-unset-key (kbd "C-i"))

;; key-chord
(require 'key-chord)
(setq key-chord-two-keys-delay 0.04)    ;’µö’ÍÆ’ÈÏ’°Ï’¤Ï0.04’ÉÃ
(key-chord-mode 1)

;; ----------------------------------------------------------------
;; @ modeline
;; ----------------------------------------------------------------

;; ’¥â’¡¼’¥É’¥é’¥¤’¥ó’¤Ë’¹Ô’ÈÖ’¹æ’É½’¼¨
(line-number-mode t)
;; ’¥â’¡¼’¥É’¥é’¥¤’¥ó’¤Ë’Îó’ÈÖ’¹æ’É½’¼¨
(column-number-mode t)

;; ’¥â’¡¼’¥É’¥é’¥¤’¥ó’¤Î’³ä’¹ç’É½’¼¨’¤ò’Áí’¹Ô’¿ô’É½’¼¨
(defvar my-lines-page-mode t)
(defvar my-mode-line-format)

(when my-lines-page-mode
  (setq my-mode-line-format "%d")
  (if size-indication-mode
      (setq my-mode-line-format (concat my-mode-line-format " of %%I")))
  (cond ((and (eq line-number-mode t) (eq column-number-mode t))
         (setq my-mode-line-format (concat my-mode-line-format " (%%l,%%c)")))
        ((eq line-number-mode t)
         (setq my-mode-line-format (concat my-mode-line-format " L%%l")))
        ((eq column-number-mode t)
         (setq my-mode-line-format (concat my-mode-line-format " C%%c"))))
  (setq mode-line-position
        '(:eval (format my-mode-line-format
                        (count-lines (point-max) (point-min))))))
(interactive "F")

;; ----------------------------------------------------------------
;; @ mode
;; ----------------------------------------------------------------
;; ----------------------------------------------------------------
;; @ emmte-mode
;; ----------------------------------------------------------------

(require 'emmet-mode)
;; C-j’¤Ç’É¾’²Á
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
(add-to-list 'auto-mode-alist '("\\.rhtml$" . rhtml-mode))
(eval-after-load "emmet-mode"
  '(progn
     ;; Preview is disable as default
     (setq emmet-preview-default nil)))

;; ----------------------------------------------------------------
;; @ scss-mode
;; ----------------------------------------------------------------

(require 'scss-mode)
(add-to-list 'auto-mode-alist '("\\.scss$" . scss-mode))

(defun scss-custom ()
  "scss-mode-hook"
  (and
   (set (make-local-variable 'css-indent-offset) 2)
   (set (make-local-variable 'scss-compile-at-save) nil)))
(add-hook 'scss-mode-hook
          '(lambda() (scss-custom)))

;; ----------------------------------------------------------------
;; @ ruby-mode
;; ----------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/elisp/ruby")
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(setq auto-mode-alist
      (append'(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.rake$" . ruby-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.rabl$" . ruby-mode)) auto-mode-alist))
(add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Guardfile$" . ruby-mode))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))
(add-hook 'ruby-mode-hook
          '(lambda ()
             (setq ruby-deep-indent-paren-style nil)
             (electric-pair-mode t)
             (electric-indent-mode t)
             (electric-layout-mode t)
             (setq electric-pair-pairs '(
                                         (?\| . ?\|)
                                         ))))
;; (defun ruby-mode-set-encoding () ())
(add-hook 'ruby-mode-hook
          (lambda ()
            (defadvice ruby-mode-set-encoding
              (around ruby-mode-set-encoding-disable activate) nil)))


;; ----------------------------------------------------------------
;; @ Rsense
;; ----------------------------------------------------------------

(setq rsense-home "/usr/local/Cellar/rsense/0.3/libexec/")
(add-to-list 'load-path (concat rsense-home "/etc"))
(require 'rsense)
(add-hook 'ruby-mode-hook
          (lambda ()
            (add-to-list 'ac-sources 'ac-source-rsense-method)
            (add-to-list 'ac-sources 'ac-source-rsense-constant)))
            ;; (define-key ruby-mode-map (kbd "C-i") 'ac-complete-rsense)))

;; ----------------------------------------------------------------
;; @ rdefs
;; ----------------------------------------------------------------

;; (require 'rdefs)
;; (add-hook 'ruby-mode-hook
;;           (lambda () (rdefs-mode)))            

;; ----------------------------------------------------------------
;; @ inf-ruby
;; ----------------------------------------------------------------

(require 'inf-ruby)
(require 'smart-compile)
;; (require 'ac-inf-ruby)                  

(autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
(add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)

(add-to-list 'inf-ruby-implementations '("pry" . "pry"))
(setq inf-ruby-default-implementation "pry")

(setq inf-ruby-first-prompt-pattern "^\\[[0-9]+\\] pry\\((.*)\\)> *")
(setq inf-ruby-prompt-pattern "^\\[[0-9]+\\] pry\\((.*)\\)[>*\"'] *")

;; ----------------------------------------------------------------
;; @ smart-compile
;; ----------------------------------------------------------------

(require 'smart-compile)
(define-key ruby-mode-map (kbd "C-c c") 'smart-compile)
(define-key ruby-mode-map (kbd "C-c C-c") (kbd "C-c c C-m"))
(setq compilation-window-height 15) ;; default window height is 15

;; ----------------------------------------------------------------
;; @ ruby-block
;; ----------------------------------------------------------------

(require 'ruby-block)
(ruby-block-mode t)
;; ’¥ß’¥Ë’¥Ð’¥Ã’¥Õ’¥¡’¤Ë’É½’¼¨’¤·, ’¤«’¤Ä, ’¥ª’¡¼’¥Ð’¥ì’¥¤’¤¹’¤ë.
(setq ruby-block-highlight-toggle t)

;; ----------------------------------------------------------------
;; @ ruby-end
;; ----------------------------------------------------------------

;; (require 'ruby-end)
;; (add-hook 'ruby-mode-hook
;;           '(lambda ()
;;              (abbrev-mode 1)
;;              (electric-pair-mode t)
;;              (electric-indent-mode t)
;;              (electric-layout-mode t)))

;; ----------------------------------------------------------------
;; @ rbenv
;; ----------------------------------------------------------------

;; (require 'rbenv)
;; (global-rbenv-mode)

;; ----------------------------------------------------------------
;; @ rcodetools
;; ----------------------------------------------------------------

(require 'rcodetools)
(define-key ruby-mode-map (kbd "C-c C-d") 'xmp)

;; ----------------------------------------------------------------
;; @ Ruby on Rails
;; ----------------------------------------------------------------
;; @ rinari
;; ----------------------------------------------------------------

(require 'rinari)
(add-hook 'ruby-mode-hook
          (lambda () (rinari-launch)))

;; ----------------------------------------------------------------
;; @ rhtml-mode
;; ----------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/elisp/ruby/rhtml-mode")
(require 'rhtml-mode)
(add-to-list 'auto-mode-alist '("\\.rhtml$" . rhtml-mode))
(add-hook 'rhtml-mode-hook
          (lambda () (rinari-launch)))

;; ----------------------------------------------------------------
;; @ js2-mode
;; ----------------------------------------------------------------

(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(setq js2-mode-hook
      '(lambda()
         (setq js2-indent-level 2)
         (setq js2-basic-offset 2)
         (setq tab-width 2)
         ))

;; ----------------------------------------------------------------
;; @ coffee-mode
;; ----------------------------------------------------------------

(require 'coffee-mode)
(defun coffee-custom ()
  "coffee-mode-hook"
  (and (set (make-local-variable 'tab-width) 2)
       (set (make-local-variable 'coffee-tab-width) 2))
  )

(add-hook 'coffee-mode-hook
          '(lambda() (coffee-custom)))

;; ----------------------------------------------------------------
;; @ elisp-mode
;; ----------------------------------------------------------------

(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (electric-layout-mode t)
             (electric-pair-mode t)
             (electric-indent-mode t)
             (setq electric-pair-pairs '(
                                         (?\| . ?\|)
                                         ))))
(require 'lispxmp)

;; ----------------------------------------------------------------
;; @ gosh-mode
;; ----------------------------------------------------------------

(setq process-coding-system-alist
      (cons '("gosh" utf-8 . utf-8) process-coding-system-alist))
(setq scheme-program-name "gosh -i")
(autoload 'scheme-mode "cmuscheme" "Major mode for Scheme." t)
(autoload 'run-scheme "cmuscheme" "Run an inferior Scheme process." t)


;; ----------------------------------------------------------------
;; @ arduino-mode
;; ----------------------------------------------------------------

(require 'arduino-mode)
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode.")

;; ----------------------------------------------------------------
;; @ yaml-mode
;; ----------------------------------------------------------------

(require 'yaml-mode)

;; ----------------------------------------------------------------
;; @ org-mode
;; ----------------------------------------------------------------

(require 'org)
(add-hook 'org-mode-hook
          '(lambda()
             (org-src-fontify-buffer)
             (electric-layout-mode t)
             (electric-pair-mode t)
             (electric-indent-mode t)
             (setq electric-pair-pairs '(
                                         (?\| . ?\|)
                                         ))))

(define-key org-mode-map (kbd "<C-tab>") (lambda () (interactive) (other-window-or-split 1)))
(define-key org-mode-map (kbd "<C-S-tab>") (lambda () (interactive) (other-window-or-split -1)))
(define-key org-mode-map (kbd "M-h") 'backward-kill-word)

;; ’¥½’¡¼’¥¹’¥³’¡¼’¥É’¤«’¤é’¼Â’¹Ô’¤Ç’¤­’¤ë
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t) (ruby . t)))

;; ’¥·’¥ó’¥¿’¥Ã’¥¯’¥¹’¥Ï’¥¤’¥é’¥¤’¥È
(setq org-src-fontify-natively t)

;; ’¥á’¡¼’¥ë
(add-hook 'mail-mode-hook 'turn-on-orgtbl)

;; ToDo
(setq org-use-fast-todo-selection t)
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(x)" "CANCEL(c)")
        (sequence "APPT(a)" "|" "DONE(x)" "CANCEL(x)")))


;; org-remember
(key-chord-define-global "l;" 'org-remember)
(org-remember-insinuate)
(setq org-directory "~/memo/")
(setq org-default-notes-file (expand-file-name "memo.org" org-directory))
(setq org-remember-templates
      '(("Note" ?n "** %?\n %i\n %a\n %t" nil "Inbox")
        ("ToDo" ?t "** TODO %?\n %i\n %a\n %t" nil "Inbox")))

;; ----------------------------------------------------------------
;; @ view-mode
;; ----------------------------------------------------------------

;; ’¥Õ’¥¡’¥¤’¥ë’¤ò’³«’¤¯’¤È’Æ±’»þ’¤Ëview-mode’¤Ë’¤¹’¤ë
;; C-x C-r 
(setq view-read-only t)

;; bv’Æ±’»þ’²¡’¤·’¤Çview-mode’¤Î’ÀÚ’¤ê’ÂØ’¤¨
(require 'key-chord)
(setq key-chord-two-keys-delay 0.04)
(key-chord-define-global "vb" 'view-mode)

;; ’½ñ’¤­’¹þ’¤ß’ÉÔ’Ç½’¤Ê’¥Õ’¥¡’¥¤’¥ë’¤Çview-mode’¤«’¤é’È´’¤±’¤Ê’¤¤’¤è’¤¦’¤Ë’¤¹’¤ë
(require 'viewer)
(viewer-stay-in-setup)

;; view-mode’¤Î’¤È’¤­’¤Ëmode-line’¤Ë’¿§’¤ò’¤Ä’¤±’¤ë
(setq viewer-modeline-color-unwritable "tomato")
(setq viewer-modeline-color-view "orange")
(viewer-change-modeline-color-setup)

;; ----------------------------------------------------------------
;; @ markdown-mode
;; ----------------------------------------------------------------

(require 'markdown-mode)
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; ----------------------------------------------------------------
;; @evil
;; ----------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/elisp/evil")
(require 'evil)
;; (evil-mode 1)

;; ----------------------------------------------------------------
;; @ elisp
;; ----------------------------------------------------------------
;; ----------------------------------------------------------------
;; @ auto-complete
;; ----------------------------------------------------------------

;; auto-complete
(when (require 'auto-complete-config nil t)
  (add-to-list 'ac-dictionary-directories
         "~/.emacs.d/elisp/ac-dict")
  (ac-config-default))

;; C-n/C-p ’¤Ç’Êä’´°’¸õ’Êä’¤ò’Áª’Âò
(setq ac-use-menu-map t)
;; ’¥Ç’¥Õ’¥©’¥ë’¥È’¤Ç’Àß’Äê’ºÑ’¤ß
(define-key ac-menu-map "\C-n" 'ac-next)
(define-key ac-menu-map "\C-p" 'ac-previous)

;; ----------------------------------------------------------------
;; @ auto-install
;; ----------------------------------------------------------------

;; ;; auto-install’¤Î’Àß’Äê
;; ;; ’¤Á’¤ç’¤Ã’¤È’½Å’¤¤’¤Î’¤Ç’¡¢’Éá’ÃÊ’¤Ï’³°’¤·’¤Æ’¤ª’¤¯
;; (when (require 'auto-install nil t)
;;   ;; ’¥¤’¥ó’¥¹’¥È’¡¼’¥ë’¥Ç’¥£’¥ì’¥¯’¥È’¥ê’¤ò’Àß’Äê’¤¹’¤ë
;;   ;; ’½é’´ü’ÃÍ’¤Ï ~/.emacs.d/auto-install/
;;   (setq auto-install-directory "~/.emacs.d/elisp")

;;   ;; EmacsWiki ’¤Ë’ÅÐ’Ï¿’¤µ’¤ì’¤Æ’¤¤’¤ë elisp ’¤Î’Ì¾’Á°’¤ò’¼è’ÆÀ’¤¹’¤ë
;;   (auto-install-update-emacswiki-package-name t)

;;   ;; ’É¬’Í×’¤Ç’¤¢’¤ì’¤Ð’¥×’¥í’¥­’¥·’¤Î’Àß’Äê’¤ò’¹Ô’¤¦
;;   ;; (setq url-proxy-services '(("http" . "localhost:8080")))

;;   ;; install-elisp ’¤Î’´Ø’¿ô’¤ò’Íø’ÍÑ’²Ä’Ç½’¤Ë’¤¹’¤ë
;;   (auto-install-compatibility-setup))

;; ----------------------------------------------------------------
;; @ package
;; ----------------------------------------------------------------

;; MELPA’¡¢Marmalade’¤Î’Àß’Äê
;; package.el’¤ÏEmacs24’¤Ë’É¸’½à’¤Ç’Æþ’¤Ã’¤Æ’¤¤’¤ë
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
;; (add-to-list 'package-archives  '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/"))
;; (package-initialize)

;; ’¥Ñ’¥Ã’¥±’¡¼’¥¸’¾ð’Êó’¤Î’¹¹’¿·
;; (package-refresh-contents)

;; ----------------------------------------------------------------
;; @ sequential-command
;; ----------------------------------------------------------------

(require 'sequential-command-config)
(sequential-command-setup-keys)

;; ----------------------------------------------------------------
;; @ uniquify
;; ----------------------------------------------------------------

(require 'uniquify)
;; filename<dir> ’·Á’¼°’¤Î’¥Ð’¥Ã’¥Õ’¥¡’Ì¾’¤Ë’¤¹’¤ë
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
;; *’¤Ç’°Ï’¤Þ’¤ì’¤¿’¥Ð’¥Ã’¥Õ’¥¡’Ì¾’¤Ï’ÂÐ’¾Ý’³°’¤Ë’¤¹’¤ë
(setq uniquify-ignore-buffers-re "*[^*]+*")

;; ----------------------------------------------------------------
;; @ tempbuf
;; ----------------------------------------------------------------

(require 'tempbuf)
;; ’¥Õ’¥¡’¥¤’¥ë’¤ò’³«’¤¤’¤¿’¤é’¼«’Æ°’Åª’¤Ëtempbuf’¤ò’Í­’¸ú’¤Ë’¤¹’¤ë
(add-hook 'find-file-hooks 'turn-on-tempbuf-mode)
(add-hook 'dired-mode-hook 'turn-on-tempbuf-mode)
(add-hook 'magit-status-mode-hook 'turn-on-tempbuf-mode)
(add-hook 'magit-process-mode-hook 'turn-on-tempbuf-mode)
(add-hook 'ag-mode-hook 'turn-on-tempbuf-mode)

;; ----------------------------------------------------------------
;; @ auto-save-buffers
;; ----------------------------------------------------------------

(require 'auto-save-buffers)
;; ’¥¢’¥¤’¥É’¥ë2’ÉÃ’¤Ç’ÊÝ’Â¸
(run-with-idle-timer 2 t 'auto-save-buffers)

;; ----------------------------------------------------------------
;; @ bm
;; ----------------------------------------------------------------

(setq-default bm-buffer-persistence nil)
(setq bm-restore-repository-on-load t)
(require 'bm)
(add-hook 'find-file-hooks 'bm-buffer-restore)
(add-hook 'kill-buffer-hooks 'bm-buffer-save)
(add-hook 'after-save-hook 'bm-buffer-save)
(add-hook 'after-revert-hook 'bm-buffer-restore)
(add-hook 'vc-before-checkin-hook 'bm-buffer-save)
(global-set-key (kbd "M-SPC") 'bm-toggle)
(global-set-key (kbd "M-[") 'bm-previous)
(global-set-key (kbd "M-]") 'bm-next)

;; ----------------------------------------------------------------
;; @ open-junk-file
;; ----------------------------------------------------------------

(require 'open-junk-file)
(setq open-junk-file-format "~/memo/junk/%Y-%m-%d-%H%M%S.")
(key-chord-define-global "jk" 'open-junk-file)

;; ----------------------------------------------------------------
;; @ helm, helm-ag, helm-c-yasnippet, helm-flycheck
;; ----------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/elisp/helm")
(add-to-list 'load-path "~/.emacs.d/elisp/helm/helm-ag")
(add-to-list 'load-path "~/.emacs.d/elisp/helm/helm-flycheck")
(add-to-list 'load-path "~/.emacs.d/elisp/helm/helm-c-yasnippet")

(require 'helm-config)
(require 'helm-ls-git)
(require 'helm-ag)
(require 'helm-flycheck)
(require 'helm-c-yasnippet)
;; (helm-descbinds-mode)                   

;; (define-key global-map (kbd "C-x C-f") 'helm-find-files)
(define-key global-map (kbd "M-x")     'helm-M-x)
(define-key global-map (kbd "M-i")     'helm-imenu)
(define-key global-map (kbd "C-x b")   'helm-for-files)
(define-key global-map (kbd "M-y")     'helm-show-kill-ring)
(define-key global-map (kbd "C-x C-b") 'helm-ls-git-ls)
(define-key global-map (kbd "C-c i i") 'helm-c-yas-complete)
;; (define-key global-map (kbd "M-s")     'helm-ag)
(define-key global-map (kbd "C-c f")   'helm-flycheck)

;; Emulate `kill-line' in helm minibuffer
(setq helm-delete-minibuffer-contents-from-point t)
(defadvice helm-delete-minibuffer-contents (before helm-emulate-kill-line activate)
  "Emulate `kill-line' in helm minibuffer"
  (kill-new (buffer-substring (point) (field-end))))

(defadvice helm-ff-kill-or-find-buffer-fname (around execute-only-if-exist activate)
  "Execute command only if CANDIDATE exists"
  (when (file-exists-p candidate)
    ad-do-it))
;; For find-file etc.
(define-key helm-read-file-map (kbd "TAB")
  'helm-execute-persistent-action)
;; For helm-find-files etc.
(define-key helm-find-files-map (kbd "TAB")
  'helm-execute-persistent-action)

(setq helm-buffer-max-length 50)

(global-set-key (kbd "C-M-z") 'helm-resume)

;; ----------------------------------------------------------------
;; @ ido
;; ----------------------------------------------------------------

;; find-file,kill-buffer,dired’ÍÑ’¤Ë’»È’¤¦
(require 'ido)
(ido-mode t)
(global-set-key (kbd "C-x C-f") 'ido-find-file)
;; (setq ido-everywhere t)
;; (setq ido-enable-flex-matching t)
;; (setq ido-create-new-buffer 'always)
;; (when (boundp 'confirm-nonexistent-file-or-buffer)
;;   (setq confirm-nonexistent-file-or-buffer nil))

;; ----------------------------------------------------------------
;; @ yasnippet
;; ----------------------------------------------------------------

(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"
        ))
(yas-global-mode 1)

;; ’Ã±’¸ì’Å¸’³«’¥­’¡¼’¥Ð’¥¤’¥ó’¥É
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ag-highlight-search t)
 '(ag-reuse-buffers (quote nil))
 '(ag-reuse-window (quote nil))
 '(custom-safe-themes (quote ("fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" "73fe242ddbaf2b985689e6ec12e29fab2ecd59f765453ad0e93bc502e6e478d6" default)))
 '(magit-use-overlays nil)
 '(yas-trigger-key "TAB"))

;; ’¿·’µ¬’¥¹’¥Ë’¥Ú’¥Ã’¥È’¤ò’ºî’À®’¤¹’¤ë’¥Ð’¥Ã’¥Õ’¥¡’¤ò’ÍÑ’°Õ’¤¹’¤ë
(define-key yas-minor-mode-map (kbd "C-c i n") 'yas-new-snippet)
;; ’´û’Â¸’¥¹’¥Ë’¥Ú’¥Ã’¥È’¤ò’±Ü’Í÷’¡¦’ÊÔ’½¸’¤¹’¤ë
(define-key yas-minor-mode-map (kbd "C-c i v") 'yas-visit-snippet-file)

;; ----------------------------------------------------------------
;; @ recentf
;; ----------------------------------------------------------------

(when (require 'recentf nil t)
  (setq recentf-max-saved-items 2000)
  (setq recentf-exclude '(".recentf"))
  (setq recentf-auto-cleanup 10)
  (setq recentf-auto-save-timer
        (run-with-idle-timer 30 t 'recentf-save-list))
  (recentf-mode 1)
  (require 'recentf-ext))

;; ----------------------------------------------------------------
;; @ undo-hist
;; ----------------------------------------------------------------

(when (require 'undohist nil t)
    (undohist-initialize))

;; ----------------------------------------------------------------
;; @ undotree
;; ----------------------------------------------------------------
;; C-x u ’¤Ç’µ¯’Æ°

(when (require 'undo-tree nil t)
    (global-undo-tree-mode))

;; ----------------------------------------------------------------
;; @ redo+
;; ----------------------------------------------------------------

(require 'redo+)
(setq undo-no-redo t)
(setq undo-limit 60000)
(setq undo-strong-limit 600000)

;; ----------------------------------------------------------------
;; @ pbcopy
;; ----------------------------------------------------------------

;; CUI’¤ÇEMACS’¤ò’µ¯’Æ°’¤µ’¤»’¤ë’¤È’¤­’¤Ë’»È’¤¦
;; (require 'pbcopy)
;; (turn-on-pbcopy)

;; ----------------------------------------------------------------
;; @ smartchr
;; ----------------------------------------------------------------

(require 'smartchr)
(add-hook 'ruby-mode-hook
          '(lambda ()
             (progn
               (local-set-key (kbd "H") (smartchr '("H" "=> ")))
               (local-set-key (kbd "I") (smartchr '("I" "|`!!'|" "|")))
               (local-set-key (kbd "E") (smartchr '("E" "== ")))
               (local-set-key (kbd "S") (smartchr '("S" "<=> ")))
               (local-set-key (kbd "L") (smartchr '("L" "->")))
               )))

(add-hook 'rhtml-mode-hook
          '(lambda ()
             (progn
               (local-set-key (kbd "H") (smartchr '("H" "=> ")))
               (local-set-key (kbd "I") (smartchr '("I" "|`!!'|" "|")))
               (local-set-key (kbd "E") (smartchr '("E" "== ")))
               (local-set-key (kbd "S") (smartchr '("S" "<=> ")))
               (local-set-key (kbd "L") (smartchr '("L" "->")))
               )))

;; ----------------------------------------------------------------
;; @ wgrep
;; ----------------------------------------------------------------

(require 'wgrep nil t)

;; ----------------------------------------------------------------
;; @ ag, wgrep_ag
;; ----------------------------------------------------------------

(require 'ag)

(define-key global-map (kbd "M-s") 'ag)

(require 'wgrep-ag)
(autoload 'wgrep-ag-setup "wgrep-ag")
(add-hook 'ag-mode-hook 'wgrep-ag-setup)
(define-key ag-mode-map (kbd "r") 'wgrep-change-to-wgrep-mode)

;; zsh’¤Îpath’¤ò’ÆÉ’¤ß’¹þ’¤à
(let* ((zshpath (shell-command-to-string
         "/usr/bin/env zsh -c 'printenv PATH'"))
       (pathlst (split-string zshpath ":")))
  (setq exec-path pathlst)
  (setq eshell-path-env zshpath)
  (setenv "PATH" zshpath))

;; ----------------------------------------------------------------
;; @ wdired
;; ----------------------------------------------------------------

(require 'wdired nil t)
;; dired’¥Ð’¥Ã’¥Õ’¥¡’¤Ç r ’¤ò’²¡’¤¹’¤Èwdired’¤ò’µ¯’Æ°’¤¹’¤ë
(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
(define-key dired-mode-map (kbd "<C-tab>") 'other-window)

;; ----------------------------------------------------------------
;; @ popwin.le
;; ----------------------------------------------------------------

(require 'popwin)
(setq display-buffer-function 'popwin:display-buffer)
(setq popwin:popup-window-position 'bottom)
(push '("*Kill Ring*"   :height 0.4) popwin:special-display-config)
(push '("*anything*"    :height 0.4) popwin:special-display-config)
(push '("^\*helm .+\*$" :regexp t)   popwin:special-display-config)
(push '("*helm-ag*"     :height 0.4) popwin:special-display-config)
(push '("*Backtrace*"   :height 0.4) popwin:special-display-config)
(push '("*Buffer List*" :height 0.4) popwin:special-display-config)
(push '("*Warnigs*"     :height 0.4) popwin:special-display-config)
(push '("*Completions*" :height 0.4) popwin:special-display-config)
(push '("*Message*"     :height 0.4) popwin:special-display-config)
(push '("*undo-tree*"   :height 0.4) popwin:special-display-config)

(setq max-specpdl-size 6000)
(setq max-lisp-eval-depth 1000)

;; ----------------------------------------------------------------
;; @ auto-heghlight-symbol
;; ----------------------------------------------------------------

(require 'auto-highlight-symbol)
(global-auto-highlight-symbol-mode t)

;; ----------------------------------------------------------------
;; @ highlight-symbol
;; ----------------------------------------------------------------

(require 'highlight-symbol)
(setq highlight-symbol-colors '("DarkOrange" "DodgerBlue1" "DeepPink1")) ;; ’»È’¤¤’¤¿’¤¤’¿§’¤ò’Àß’Äê’¡¢repeat’¤·’¤Æ’¤¯’¤ì’¤ë

;; ’Å¬’µ¹keybind’¤Î’Àß’Äê
(global-unset-key "\C-o")
(global-set-key (kbd "C-o" ) 'highlight-symbol-at-point)
(global-set-key (kbd "M-o") 'highlight-symbol-remove-all)

;; ----------------------------------------------------------------
;; @ anzu
;; ----------------------------------------------------------------

(require 'anzu)

(global-anzu-mode +1)
(setq anzu-search-threshold 1000)
(setq anzu-minimum-input-length 3)

(global-set-key (kbd "M-r") 'anzu-query-replace)
(global-set-key (kbd "M-R") 'anzu-query-replace-regexp)

;; ----------------------------------------------------------------
;; @ smartrep, expand-region, multiple-cursors
;; ----------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/elisp/expand-region/")
(add-to-list 'load-path "~/.emacs.d/elisp/multiple-cursors/")

(require 'smartrep)
(require 'expand-region)
(require 'multiple-cursors)

(global-unset-key "\C-]")
(global-set-key (kbd "C-]") 'er/expand-region)
(global-set-key (kbd "M-]") 'er/contract-region)

(declare-function smartrep-define-key "smartrep")

(global-set-key (kbd "C-M-c") 'mc/edit-lines)
(global-set-key (kbd "C-M-r") 'mc/mark-all-in-region)

(global-unset-key "\C-l")

(smartrep-define-key global-map "C-l"
  '(("C-l"      . 'mc/mark-next-like-this)
    ("n"        . 'mc/mark-next-like-this)
    ("p"        . 'mc/mark-previous-like-this)
    ("m"        . 'mc/mark-more-like-this-extended)
    ("u"        . 'mc/unmark-next-like-this)
    ("U"        . 'mc/unmark-previous-like-this)
    ("s"        . 'mc/skip-to-next-like-this)
    ("S"        . 'mc/skip-to-previous-like-this)
    ("*"        . 'mc/mark-all-like-this)
    ("d"        . 'mc/mark-all-like-this-dwim)
    ("i"        . 'mc/insert-numbers)
    ("o"        . 'mc/sort-regions)
    ("O"        . 'mc/reverse-regions)))

;; ----------------------------------------------------------------
;; @ magit
;; ----------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/elisp/magit")
(require 'magit)
(set-variable 'magit-emacsclient-executable "/usr/local/Cellar/emacs/24.3/bin/emacsclient")
(global-set-key (kbd "C-x C-s") 'magit-status)

;; ----------------------------------------------------------------
;; @ bufhistory
;; ----------------------------------------------------------------

;; (require 'bufhistory)
;; (bufhistory-mode 1)

;; ----------------------------------------------------------------
;; @ git-gutter-fringe
;; ----------------------------------------------------------------

(require 'git-gutter-fringe)

;; If you enable global minor mode
(global-git-gutter-mode t)
(global-set-key (kbd "C-c C-t") 'git-gutter:toggle)
(global-set-key (kbd "C-c v h") 'git-gutter:popup-hunk)

;; Jump to next/previous hunk
(global-set-key (kbd "C-c p") 'git-gutter:previous-hunk)
(global-set-key (kbd "C-c n") 'git-gutter:next-hunk)

;; ----------------------------------------------------------------
;; @ flycheck, flycheck-color-mode-line
;; ----------------------------------------------------------------

(add-hook 'ruby-mode-hook 'flycheck-mode)

(require 'flycheck-color-mode-line)
(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)

;; flymake
;; (smartrep-define-key
;;     global-map "M-g" '(("M-n" . 'flymake-goto-next-error)
;;                        ("M-p" . 'flymake-goto-prev-error)))

;; ----------------------------------------------------------------
;; @ col-highlight
;; ----------------------------------------------------------------

(require 'col-highlight)
(global-set-key (kbd "C-c C-l") 'column-highlight-mode)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
