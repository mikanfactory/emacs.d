CAST	                            [function]	CAST(expr AS typename)
ANYVALUE	                        [function]	ANY_VALUE(expression)  [OVER (...)]
ARRAY_AGG	                       [function]	Array_AGG([DISTINCT]  expression  [{IGNORE|RESPECT} NULLS] [ORDER BY key [{ASC|DESC}] [, ... ]]  [LIMIT n]) [OVER (...)]
ARRAY_CONCAT_AGG	                [function]	ARRAY_CONCAT_AGG(expression  [ORDER BY key [{ASC|DESC}] [, ... ]]  [LIMIT n])
AVG	                             [function]	AVG([DISTINCT]  expression)  [OVER (...)]
BIT_AND	                         [function]	BIT_AND(expression)
BIT_OR	                          [function]	BIT_OR(expression)
BIT_XOR	                         [function]	BIT_XOR([DISTINCT]  expression)
COUNT	                           [function]	1. COUNT(*)  [OVER (...)] 2. COUNT([DISTINCT]  expression)  [OVER (...)]
COUNTIF	                         [function]	COUNTIF(expression)  [OVER (...)]
LOGICAL_AND	                     [function]	LOGICAL_AND(expression)
LOGICAL_OR	                      [function]	LOGICAL_OR(expression)
MAX	                             [function]	MAX(expression)  [OVER (...)]
MIN	                             [function]	MIN(expression)  [OVER (...)]
STRING_AGG	                      [function]	STRING_AGG([DISTINCT]  expression [, delimiter]  [ORDER BY key [{ASC|DESC}] [, ... ]]  [LIMIT n]) [OVER (...)]
SUM	                             [function]	SUM([DISTINCT]  expression)  [OVER (...)]
CORR	                            [function]	CORR(X1, X2)
COVAR_POP	                       [function]	COVAR_POP(X1, X2)
COVAR_SAMP	                      [function]	COVAR_SAMP(X1, X2)
STDDEV_POP	                      [function]	STDDEV_POP([DISTINCT]  expression)  [OVER (...)]
STDDEV_SAMP	                     [function]	STDDEV_SAMP([DISTINCT]  expression)  [OVER (...)]
STDDEV	                          [function]	STDDEV([DISTINCT]  expression)  [OVER (...)]
VAR_POP	                         [function]	VAR_POP([DISTINCT]  expression)  [OVER (...)]
VAR_SAMP	                        [function]	VAR_SAMP([DISTINCT]  expression)  [OVER (...)]
VARIANCE	                        [function]	VARIANCE([DISTINCT]  expression)  [OVER (...)]
APPROX_COUNT_DISTINCT	           [function]	APPROX_COUNT_DISTINCT(expression)
APPROX_QUANTILES	                [function]	APPROX_QUANTILES([DISTINCT]  expression, number  [{IGNORE|RESPECT} NULLS])
APPROX_TOP_COUNT	                [function]	APPROX_TOP_COUNT(expression, number)
APPROX_TOP_SUM	                  [function]	APPROX_TOP_SUM(expression, weight, number)
HLL_COUNT.INIT	                  [function]	HLL_COUNT.INIT(input [, precision])
HLL_COUNT.MERGE	                 [function]	HLL_COUNT.MERGE(sketch)
HLL_COUNT.MERGE_PARTIAL	         [function]	HLL_COUNT.MERGE_PARTIAL(sketch)
HLL_COUNT.EXTRACT	               [function]	HLL_COUNT.EXTRACT(sketch)
BIT_COUNT	                       [function]	BIT_COUNT(expression)
ABS	                             [function]	ABS(X)
SIGN	                            [function]	SIGN(X)
IS_INF	                          [function]	IS_INF(X)
IS_NAN	                          [function]	IS_NAN(X)
IEEE_DIVIDE	                     [function]	IEEE_DIVIDE(X, Y)
RAND	                            [function]	RAND()
SQRT	                            [function]	SQRT(X)
POW	                             [function]	POW(X, Y)
POWER	                           [function]	POWER(X, Y)
EXP	                             [function]	EXP(X)
LN	                              [function]	LN(X)
LOG	                             [function]	1. LOG(X) 2. LOG(X, Y)
LOG10	                           [function]	LOG10(X)
GREATEST	                        [function]	GREATEST(X1,...,XN)
LEAST	                           [function]	LEAST(X1,...,XN)
DIV	                             [function]	DIV(X, Y)
SAFE_DIV	                        [function]	SAFE_DIV(X, Y)
MOD	                             [function]	MOD(X, Y)
ROUND	                           [function]	1. ROUND(X) 2. ROUND(X, N)
TRUNC	                           [function]	1. TRUNC(X) 2. TRUNC(X, N)
CEIL	                            [function]	CEIL(X)
CEILING	                         [function]	CEILING(X)
FLOOR	                           [function]	FLOOR(X)
COS	                             [function]	COS(X)
COSH	                            [function]	COSH(X)
ACOS	                            [function]	 ACOS(X)
ACOSH	                           [function]	ACOSH(X)
SIN	                             [function]	SIN(X)
SINH	                            [function]	SINH(X)
ASIN	                            [function]	 ASIN(X)
ASINH	                           [function]	ASINH(X)
TAN	                             [function]	TAN(X)
TANH	                            [function]	TANH(X)
ATAN	                            [function]	ATAN(X)
ATANH	                           [function]	ATANH(X)
ATAN2	                           [function]	ATAN2(X, Y)
FARM_FINGERPRINT	                [function]	FARM_FINGERPRINT(value)
MD5	                             [function]	MD5(input)
SHA1	                            [function]	SHA1(input)
SHA256	                          [function]	SHA256(input)
SHA512	                          [function]	SHA512(input)
BYTE_LENGTH	                     [function]	BYTE_LENGTH(value)
CHAR_LENGTH	                     [function]	CHAR_LENGTH(value)
CHARACTER_LENGTH	                [function]	CHARACTER_LENGTH(value)
CODE_POINTS_TO_BYTES	            [function]	CODE_POINTS_TO_BYTES(ascii_values)
CODE_POINTS_TO_STRING	           [function]	CODE_POINTS_TO_STRING(value)
CONCAT	                          [function]	CONCAT(value1[, ...])
ENDS_WITH	                       [function]	ENDS_WITH(value1, value2)
FORMAT	                          [function]	FORMAT(<format_string>, ...)
FROM_BASE64	                     [function]	FROM_BASE64(string_expr)
LENGTH	                          [function]	LENGTH(value)
LPAD	                            [function]	LPAD(original_value, return_length[, pattern])
LOWER	                           [function]	LOWER(value)
LTRIM	                           [function]	LTRIM(value1[, value2])
REGEXP_CONTAINS	                 [function]	REGEXP_CONTAINS(value, regex)
REGEXP_EXTRACT	                  [function]	REGEXP_EXTRACT(value, regex)
REGEXP_EXTRACT_ALL	              [function]	REGEXP_EXTRACT_ALL(value, regex)
REGEXP_REPLACE	                  [function]	REGEXP_REPLACE(value, regex, replacement)
REPLACE	                         [function]	REPLACE(original_value, from_value, to_value)
REPEAT	                          [function]	REPEAT(original_value, repetitions)
REVERSE	                         [function]	REVERSE(value)
RPAD	                            [function]	RPAD(original_value, return_length[, pattern])
RTRIM	                           [function]	RTRIM(value1[, value2])
SAFE_CONVERT_BYTES_TO_STRING	    [function]	SAFE_CONVERT_BYTES_TO_STRING(value)
SPLIT	                           [function]	SPLIT(value[, delimiter])
STARTS_WITH	                     [function]	STARTS_WITH(value1, value2)
STRPOS	                          [function]	STRPOS(value1, value2)
SUBSTR	                          [function]	SUBSTR(value, position[, length])
TO_BASE64	                       [function]	TO_BASE64(bytes_expr)
TO_CODE_POINTS	                  [function]	TO_CODE_POINTS(value)
TRIM	                            [function]	TRIM(value1[, value2])
UPPER	                           [function]	UPPER(value)
JSON_EXTRACT	                    [function]	JSON_EXTRACT(json_string_expr, json_path_string_literal)
TO_JSON_STRING	                  [function]	TO_JSON_STRING(value[, pretty_print])
ARRAY_CONCAT	                    [function]	ARRAY_CONCAT(array_expression_1 [, array_expression_n])
ARRAY_LENGTH	                    [function]	ARRAY_LENGTH(array_expression)
ARRAY_TO_STRING	                 [function]	ARRAY_TO_STRING(array_expression, delimiter[, null_text])
GENERATE_ARRAY	                  [function]	GENERATE_ARRAY(start_expression, end_expression[, step_expression])
GENERATE_DATE_ARRAY	             [function]	GENERATE_DATE_ARRAY(start_date, end_date[, INTERVAL INT64_expr date_part])
OFFSET	                          [function]	array_expression[OFFSET(zero_based_offset)]
ORDINAL	                         [function]	array_expression[ORDINAL(one_based_offset)]
ARRAY_REVERSE	                   [function]	ARRAY_REVERSE(value)
SAFE_OFFSET	                     [function]	array_expression[SAFE_OFFSET(zero_based_offset)]
SAFE_ORDINAL	                    [function]	array_expression[SAFE_ORDINAL(one_based_offset)]
CURRENT_DATE	                    [function]	CURRENT_DATE([time_zone])
EXTRACT	                         [function]	EXTRACT(part FROM date_expression)
DATE	                            [function]	DATE(year, month, day)
DATE	                            [function]	DATE(timestamp_expression[, timezone])
DATE_ADD	                        [function]	DATE_ADD(date_expression, INTERVAL INT64_expr date_part)
DATE_SUB	                        [function]	DATE_SUB(date_expression, INTERVAL INT64_expr date_part)
DATE_DIFF	                       [function]	DATE_DIFF(date_expression, date_expression, date_part)
DATE_TRUNC	                      [function]	DATE_TRUNC(date_expression, date_part)
DATE_FROM_UNIX_DATE	             [function]	DATE_FROM_UNIX_DATE(INT64_expression)
FORMAT_DATE	                     [function]	FORMAT_DATE(format_string, date_expr)
PARSE_DATE	                      [function]	PARSE_DATE(format_string, date_string)
UNIX_DATE	                       [function]	UNIX_DATE(date_expression)
CURRENT_DATETIME	                [function]	CURRENT_DATETIME([timezone])
DATETIME	                        [function]	DATETIME(year, month, day, hour, minute, second)
DATETIME	                        [function]	DATETIME(date_expression, time_expression)
DATETIME	                        [function]	DATETIME(timestamp_expression, timezone)
DATETIME_ADD	                    [function]	DATETIME_ADD(datetime_expression, INTERVAL INT64_expr part)
DATETIME_SUB	                    [function]	DATETIME_SUB(datetime_expression, INTERVAL INT64_expr part)
DATETIME_DIFF	                   [function]	DATETIME_DIFF(datetime_expression, datetime_expression, part)
DATETIME_TRUNC	                  [function]	DATETIME_TRUNC(datetime_expression, part)
FORMAT_DATETIME	                 [function]	FORMAT_DATETIME(format_string, datetime_expression)
PARSE_DATETIME	                  [function]	PARSE_DATETIME(format_string, string)
CURRENT_TIME	                    [function]	CURRENT_TIME()
TIME	                            [function]	TIME(hour, minute, second)
TIME	                            [function]	TIME(timestamp, [timezone])
TIME_ADD	                        [function]	TIME_ADD(time_expression, INTERVAL INT64_expr part)
TIME_SUB	                        [function]	TIME_SUB(time_expression, INTERVAL INT_expr part)
TIME_DIFF	                       [function]	TIME_DIFF(time_expression, time_expression, part)
TIME_TRUNC	                      [function]	TIME_TRUNC(time_expression, part)
FORMAT_TIME	                     [function]	FORMAT_TIME(format_string, time_object)
PARSE_TIME	                      [function]	PARSE_TIME(format_string, string)
CURRENT_TIMESTAMP	               [function]	CURRENT_TIMESTAMP()
EXTRACT	                         [function]	EXTRACT(part FROM timestamp_expression [AT TIME ZONE tz_spec])
STRING	                          [function]	STRING(timestamp_expression[, timezone])
TIMESTAMP	                       [function]	TIMESTAMP(string_expression[, timezone])
TIMESTAMP	                       [function]	TIMESTAMP(date_expression[, timezone])
TIMESTAMP_ADD	                   [function]	TIMESTAMP_ADD(timestamp_expression, INTERVAL INT64_expr date_part)
TIMESTAMP_SUB	                   [function]	TIMESTAMP_SUB(timestamp_expression, INTERVAL INT_expr date_part)
TIMESTAMP_DIFF	                  [function]	TIMESTAMP_DIFF(timestamp_expression, timestamp_expression, date_part)
TIMESTAMP_TRUNC	                 [function]	TIMESTAMP_TRUNC(timestamp_expression, date_part, [, time_zone])
FORMAT_TIMESTAMP	                [function]	FORMAT_TIMESTAMP(format_string, timestamp[, time_zone])
PARSE_TIMESTAMP	                 [function]	PARSE_TIMESTAMP(format_string, string[, time_zone])
TIMESTAMP_SECONDS	               [function]	TIMESTAMP_SECONDS(INT64_expression)
TIMESTAMP_MILLIS	                [function]	TIMESTAMP_MILLIS(INT64_expression)
TIMESTAMP_MICROS	                [function]	TIMESTAMP_MICROS(INT64_expression)
UNIX_SECONDS	                    [function]	UNIX_SECONDS(timestamp_expression)
UNIX_MILLIS	                     [function]	UNIX_MILLIS(timestamp_expression)
SESSION_USER	                    [function]	SESSION_USER()
NET.IP_FROM_STRING	              [function]	NET.IP_FROM_STRING(addr_str)
NET.SAFE_IP_FROM_STRING	         [function]	NET.SAFE_IP_FROM_STRING(addr_str)
NET.IP_TO_STRING	                [function]	NET.IP_TO_STRING(addr_bin)
NET.IP_NET_MASK	                 [function]	NET.IP_NET_MASK(num_output_bytes, prefix_length)
NET.IP_TRUNC	                    [function]	NET.IP_TRUNC(addr_bin, prefix_length)
NET.IPV4_FROM_INT64	             [function]	NET.IPV4_FROM_INT64(integer_value)
NET.IPV4_TO_INT64	               [function]	NET.IPV4_TO_INT64(addr_bin)
NET.HOST	                        [function]	NET.HOST(url)
NET.PUBLIC_SUFFIX	               [function]	NET.PUBLIC_SUFFIX(url)
NET.REG_DOMAIN	                  [function]	NET.REG_DOMAIN(url)
