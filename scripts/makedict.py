dicts = [
    # Conversion rules
    ("CAST", "CAST(expr AS typename)"),
    # Aggregate Functions
    ("ANYVALUE", "ANY_VALUE(expression)  [OVER (...)]"),
    ("ARRAY_AGG", "Array_AGG([DISTINCT]  expression  [{IGNORE|RESPECT} NULLS] [ORDER BY key [{ASC|DESC}] [, ... ]]  [LIMIT n]) [OVER (...)]"),
    ("ARRAY_CONCAT_AGG", "ARRAY_CONCAT_AGG(expression  [ORDER BY key [{ASC|DESC}] [, ... ]]  [LIMIT n])"),
    ("AVG", "AVG([DISTINCT]  expression)  [OVER (...)]"),
    ("BIT_AND", "BIT_AND(expression)"),
    ("BIT_OR", "BIT_OR(expression)"),
    ("BIT_XOR", "BIT_XOR([DISTINCT]  expression)"),
    ("COUNT", "1. COUNT(*)  [OVER (...)] 2. COUNT([DISTINCT]  expression)  [OVER (...)]"),
    ("COUNTIF", "COUNTIF(expression)  [OVER (...)]"),
    ("LOGICAL_AND", "LOGICAL_AND(expression)"),
    ("LOGICAL_OR", "LOGICAL_OR(expression)"),
    ("MAX", "MAX(expression)  [OVER (...)]"),
    ("MIN", "MIN(expression)  [OVER (...)]"),
    ("STRING_AGG", "STRING_AGG([DISTINCT]  expression [, delimiter]  [ORDER BY key [{ASC|DESC}] [, ... ]]  [LIMIT n]) [OVER (...)]"),
    ("SUM", "SUM([DISTINCT]  expression)  [OVER (...)]"),
    # Statisitical Aggregate Functions
    ("CORR", "CORR(X1, X2)"),
    ("COVAR_POP", "COVAR_POP(X1, X2)"),
    ("COVAR_SAMP", "COVAR_SAMP(X1, X2)"),
    ("STDDEV_POP", "STDDEV_POP([DISTINCT]  expression)  [OVER (...)]"),
    ("STDDEV_SAMP", "STDDEV_SAMP([DISTINCT]  expression)  [OVER (...)]"),
    ("STDDEV", "STDDEV([DISTINCT]  expression)  [OVER (...)]"),
    ("VAR_POP", "VAR_POP([DISTINCT]  expression)  [OVER (...)]"),
    ("VAR_SAMP", "VAR_SAMP([DISTINCT]  expression)  [OVER (...)]"),
    ("VARIANCE", "VARIANCE([DISTINCT]  expression)  [OVER (...)]"),
    # Approximate Aggregate Functions
    ("APPROX_COUNT_DISTINCT", "APPROX_COUNT_DISTINCT(expression)"),
    ("APPROX_QUANTILES", "APPROX_QUANTILES([DISTINCT]  expression, number  [{IGNORE|RESPECT} NULLS])"),
    ("APPROX_TOP_COUNT", "APPROX_TOP_COUNT(expression, number)"),
    ("APPROX_TOP_SUM", "APPROX_TOP_SUM(expression, weight, number)"),
    # HyperLogLog++ Functions
    ("HLL_COUNT.INIT", "HLL_COUNT.INIT(input [, precision])"),
    ("HLL_COUNT.MERGE", "HLL_COUNT.MERGE(sketch)"),
    ("HLL_COUNT.MERGE_PARTIAL", "HLL_COUNT.MERGE_PARTIAL(sketch)"),
    ("HLL_COUNT.EXTRACT", "HLL_COUNT.EXTRACT(sketch)"),
    # Bit Functions
    ("BIT_COUNT", "BIT_COUNT(expression)"),
    # Mathematical Functions
    ("ABS", "ABS(X)"),
    ("SIGN", "SIGN(X)"),
    ("IS_INF", "IS_INF(X)"),
    ("IS_NAN", "IS_NAN(X)"),
    ("IEEE_DIVIDE", "IEEE_DIVIDE(X, Y)"),
    ("RAND", "RAND()"),
    ("SQRT", "SQRT(X)"),
    ("POW", "POW(X, Y)"),
    ("POWER", "POWER(X, Y)"),
    ("EXP", "EXP(X)"),
    ("LN", "LN(X)"),
    ("LOG", "1. LOG(X) 2. LOG(X, Y)"),
    ("LOG10", "LOG10(X)"),
    ("GREATEST", "GREATEST(X1,...,XN)"),
    ("LEAST", "LEAST(X1,...,XN)"),
    ("DIV", "DIV(X, Y)"),
    ("SAFE_DIV", "SAFE_DIV(X, Y)"),
    ("MOD", "MOD(X, Y)"),
    # Rounding Functions
    ("ROUND", "1. ROUND(X) 2. ROUND(X, N)"),
    ("TRUNC", "1. TRUNC(X) 2. TRUNC(X, N)"),
    ("CEIL", "CEIL(X)"),
    ("CEILING", "CEILING(X)"),
    ("FLOOR", "FLOOR(X)"),
    # Trigonometric and hyperbolic functions
    ("COS", "COS(X)"),
    ("COSH", "COSH(X)"),
    ("ACOS", " ACOS(X)"),
    ("ACOSH", "ACOSH(X)"),
    ("SIN", "SIN(X)"),
    ("SINH", "SINH(X)"),
    ("ASIN", " ASIN(X)"),
    ("ASINH", "ASINH(X)"),
    ("TAN", "TAN(X)"),
    ("TANH", "TANH(X)"),
    ("ATAN", "ATAN(X)"),
    ("ATANH", "ATANH(X)"),
    ("ATAN2", "ATAN2(X, Y)"),
    # Hash Functions
    ("FARM_FINGERPRINT", "FARM_FINGERPRINT(value)"),
    ("MD5", "MD5(input)"),
    ("SHA1", "SHA1(input)"),
    ("SHA256","SHA256(input)"),
    ("SHA512", "SHA512(input)"),
    # String functions
    ("BYTE_LENGTH", "BYTE_LENGTH(value)"),
    ("CHAR_LENGTH", "CHAR_LENGTH(value)"),
    ("CHARACTER_LENGTH", "CHARACTER_LENGTH(value)"),
    ("CODE_POINTS_TO_BYTES", "CODE_POINTS_TO_BYTES(ascii_values)"),
    ("CODE_POINTS_TO_STRING", "CODE_POINTS_TO_STRING(value)"),
    ("CONCAT", "CONCAT(value1[, ...])"),
    ("ENDS_WITH", "ENDS_WITH(value1, value2)"),
    ("FORMAT", "FORMAT(<format_string>, ...)"),
    ("FROM_BASE64", "FROM_BASE64(string_expr)"),
    ("LENGTH", "LENGTH(value)"),
    ("LPAD", "LPAD(original_value, return_length[, pattern])"),
    ("LOWER", "LOWER(value)"),
    ("LTRIM", "LTRIM(value1[, value2])"),
    ("REGEXP_CONTAINS", "REGEXP_CONTAINS(value, regex)"),
    ("REGEXP_EXTRACT", "REGEXP_EXTRACT(value, regex)"),
    ("REGEXP_EXTRACT_ALL", "REGEXP_EXTRACT_ALL(value, regex)"),
    ("REGEXP_REPLACE", "REGEXP_REPLACE(value, regex, replacement)"),
    ("REPLACE", "REPLACE(original_value, from_value, to_value)"),
    ("REPEAT", "REPEAT(original_value, repetitions)"),
    ("REVERSE", "REVERSE(value)"),
    ("RPAD", "RPAD(original_value, return_length[, pattern])"),
    ("RTRIM", "RTRIM(value1[, value2])"),
    ("SAFE_CONVERT_BYTES_TO_STRING", "SAFE_CONVERT_BYTES_TO_STRING(value)"),
    ("SPLIT", "SPLIT(value[, delimiter])"),
    ("STARTS_WITH", "STARTS_WITH(value1, value2)"),
    ("STRPOS", "STRPOS(value1, value2)"),
    ("SUBSTR", "SUBSTR(value, position[, length])"),
    ("TO_BASE64", "TO_BASE64(bytes_expr)"),
    ("TO_CODE_POINTS", "TO_CODE_POINTS(value)"),
    ("TRIM", "TRIM(value1[, value2])"),
    ("UPPER", "UPPER(value)"),
    # JSON_FUNCTIONS
    ("JSON_EXTRACT", "JSON_EXTRACT(json_string_expr, json_path_string_literal)"),
    ("TO_JSON_STRING", "TO_JSON_STRING(value[, pretty_print])"),
    # Array functions
    ("ARRAY_CONCAT", "ARRAY_CONCAT(array_expression_1 [, array_expression_n])"),
    ("ARRAY_LENGTH", "ARRAY_LENGTH(array_expression)"),
    ("ARRAY_TO_STRING", "ARRAY_TO_STRING(array_expression, delimiter[, null_text])"),
    ("GENERATE_ARRAY", "GENERATE_ARRAY(start_expression, end_expression[, step_expression])"),
    ("GENERATE_DATE_ARRAY", "GENERATE_DATE_ARRAY(start_date, end_date[, INTERVAL INT64_expr date_part])"),
    ("OFFSET", "array_expression[OFFSET(zero_based_offset)]"),
    ("ORDINAL", "array_expression[ORDINAL(one_based_offset)]"),
    ("ARRAY_REVERSE", "ARRAY_REVERSE(value)"),
    ("SAFE_OFFSET", "array_expression[SAFE_OFFSET(zero_based_offset)]"),
    ("SAFE_ORDINAL", "array_expression[SAFE_ORDINAL(one_based_offset)]"),
    # DATE functions
    ("CURRENT_DATE", "CURRENT_DATE([time_zone])"),
    ("EXTRACT", "EXTRACT(part FROM date_expression)"),
    ("DATE", "DATE(year, month, day)"),
    ("DATE", "DATE(timestamp_expression[, timezone])"),
    ("DATE_ADD", "DATE_ADD(date_expression, INTERVAL INT64_expr date_part)"),
    ("DATE_SUB", "DATE_SUB(date_expression, INTERVAL INT64_expr date_part)"),
    ("DATE_DIFF", "DATE_DIFF(date_expression, date_expression, date_part)"),
    ("DATE_TRUNC", "DATE_TRUNC(date_expression, date_part)"),
    ("DATE_FROM_UNIX_DATE", "DATE_FROM_UNIX_DATE(INT64_expression)"),
    ("FORMAT_DATE", "FORMAT_DATE(format_string, date_expr)"),
    ("PARSE_DATE", "PARSE_DATE(format_string, date_string)"),
    ("UNIX_DATE", "UNIX_DATE(date_expression)"),
    # DATETIME functions
    ("CURRENT_DATETIME", "CURRENT_DATETIME([timezone])"),
    ("DATETIME", "DATETIME(year, month, day, hour, minute, second)"),
    ("DATETIME", "DATETIME(date_expression, time_expression)"),
    ("DATETIME", "DATETIME(timestamp_expression, timezone)"),
    ("DATETIME_ADD", "DATETIME_ADD(datetime_expression, INTERVAL INT64_expr part)"),
    ("DATETIME_SUB", "DATETIME_SUB(datetime_expression, INTERVAL INT64_expr part)"),
    ("DATETIME_DIFF", "DATETIME_DIFF(datetime_expression, datetime_expression, part)"),
    ("DATETIME_TRUNC", "DATETIME_TRUNC(datetime_expression, part)"),
    ("FORMAT_DATETIME", "FORMAT_DATETIME(format_string, datetime_expression)"),
    ("PARSE_DATETIME", "PARSE_DATETIME(format_string, string)"),
    # TIME functions
    ("CURRENT_TIME", "CURRENT_TIME()"),
    ("TIME", "TIME(hour, minute, second)"),
    ("TIME", "TIME(timestamp, [timezone])"),
    ("TIME_ADD", "TIME_ADD(time_expression, INTERVAL INT64_expr part)"),
    ("TIME_SUB", "TIME_SUB(time_expression, INTERVAL INT_expr part)"),
    ("TIME_DIFF", "TIME_DIFF(time_expression, time_expression, part)"),
    ("TIME_TRUNC", "TIME_TRUNC(time_expression, part)"),
    ("FORMAT_TIME", "FORMAT_TIME(format_string, time_object)"),
    ("PARSE_TIME", "PARSE_TIME(format_string, string)"),
    # TIMESTAMP functions
    ("CURRENT_TIMESTAMP", "CURRENT_TIMESTAMP()"),
    ("EXTRACT", "EXTRACT(part FROM timestamp_expression [AT TIME ZONE tz_spec])"),
    ("STRING", "STRING(timestamp_expression[, timezone])"),
    ("TIMESTAMP", "TIMESTAMP(string_expression[, timezone])"),
    ("TIMESTAMP", "TIMESTAMP(date_expression[, timezone])"),
    ("TIMESTAMP_ADD", "TIMESTAMP_ADD(timestamp_expression, INTERVAL INT64_expr date_part)"),
    ("TIMESTAMP_SUB", "TIMESTAMP_SUB(timestamp_expression, INTERVAL INT_expr date_part)"),
    ("TIMESTAMP_DIFF", "TIMESTAMP_DIFF(timestamp_expression, timestamp_expression, date_part)"),
    ("TIMESTAMP_TRUNC", "TIMESTAMP_TRUNC(timestamp_expression, date_part, [, time_zone])"),
    ("FORMAT_TIMESTAMP", "FORMAT_TIMESTAMP(format_string, timestamp[, time_zone])"),
    ("PARSE_TIMESTAMP", "PARSE_TIMESTAMP(format_string, string[, time_zone])"),
    ("TIMESTAMP_SECONDS", "TIMESTAMP_SECONDS(INT64_expression)"),
    ("TIMESTAMP_MILLIS", "TIMESTAMP_MILLIS(INT64_expression)"),
    ("TIMESTAMP_MICROS", "TIMESTAMP_MICROS(INT64_expression)"),
    ("UNIX_SECONDS", "UNIX_SECONDS(timestamp_expression)"),
    ("UNIX_MILLIS", "UNIX_MILLIS(timestamp_expression)"),
    # Security functions
    ("SESSION_USER", "SESSION_USER()"),
    # NET functions
    ("NET.IP_FROM_STRING", "NET.IP_FROM_STRING(addr_str)"),
    ("NET.SAFE_IP_FROM_STRING", "NET.SAFE_IP_FROM_STRING(addr_str)"),
    ("NET.IP_TO_STRING", "NET.IP_TO_STRING(addr_bin)"),
    ("NET.IP_NET_MASK", "NET.IP_NET_MASK(num_output_bytes, prefix_length)"),
    ("NET.IP_TRUNC", "NET.IP_TRUNC(addr_bin, prefix_length)"),
    ("NET.IPV4_FROM_INT64", "NET.IPV4_FROM_INT64(integer_value)"),
    ("NET.IPV4_TO_INT64", "NET.IPV4_TO_INT64(addr_bin)"),
    ("NET.HOST", "NET.HOST(url)"),
    ("NET.PUBLIC_SUFFIX", "NET.PUBLIC_SUFFIX(url)"),
    ("NET.REG_DOMAIN", "NET.REG_DOMAIN(url)")
]

if __name__ == '__main__':
    acc = 0
    for idx, dic in enumerate(dicts):
        key, _ = dic
        if len(key) > acc:
            acc = len(key)

    with open("dict/sql-mode", 'w') as f:
        for dic in dicts:
            key, value = dic
            white_space = "".join([" "]*(acc - len(key) + 4))
            f.write("{}\t{}[function]\t{}\n".format(key, white_space, value))
